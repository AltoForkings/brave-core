diff --git a/third_party/blink/renderer/core/html/parser/background_html_parser.cc b/third_party/blink/renderer/core/html/parser/background_html_parser.cc
index 7ebc9c1e33cd789cc363f38d5553ade27fdcf3ce..c3f02c2ddbb24b34f903dcd6766305a9db220966 100644
--- a/third_party/blink/renderer/core/html/parser/background_html_parser.cc
+++ b/third_party/blink/renderer/core/html/parser/background_html_parser.cc
@@ -29,6 +29,9 @@
 #include <utility>
 
 #include "base/single_thread_task_runner.h"
+#include "base/logging.h"
+#include "base/debug/stack_trace.h"
+#include "third_party/blink/public/common/features.h"
 #include "third_party/blink/public/platform/platform.h"
 #include "third_party/blink/renderer/core/html/parser/html_document_parser.h"
 #include "third_party/blink/renderer/core/html/parser/text_resource_decoder.h"
@@ -77,7 +80,12 @@ void BackgroundHTMLParser::Init(
     const KURL& document_url,
     std::unique_ptr<CachedDocumentParameters> cached_document_parameters,
     const MediaValuesCached::MediaValuesCachedData& media_values_cached_data,
-    bool priority_hints_origin_trial_enabled) {
+    bool priority_hints_origin_trial_enabled,
+    bool speedreader_enabled) {
+  speedreader_enabled_ = speedreader_enabled;
+  if (speedreader_enabled) {
+    speedreader_.reset(document_url.GetString().Utf8().data());
+  }
   preload_scanner_.reset(new TokenPreloadScanner(
       document_url, std::move(cached_document_parameters),
       media_values_cached_data, TokenPreloadScanner::ScannerType::kMainDocument,
@@ -113,7 +121,11 @@ void BackgroundHTMLParser::AppendRawBytesFromMainThread(
 void BackgroundHTMLParser::AppendDecodedBytes(const String& input) {
   DCHECK(!input_.Current().IsClosed());
   input_.Append(input);
-  PumpTokenizer();
+  if (speedreader_enabled_) {
+    speedreader_.pumpContent(input.Utf8().data());
+  } else {
+    PumpTokenizer();
+  }
 }
 
 void BackgroundHTMLParser::SetDecoder(
@@ -164,6 +176,18 @@ void BackgroundHTMLParser::StartedChunkWithCheckpoint(
 }
 
 void BackgroundHTMLParser::Finish() {
+  if (speedreader_enabled_) {
+    std::string transformed;
+    bool readable = speedreader_.finalize(&transformed);
+    if (readable) {
+      if (parser_) {
+        parser_->DidTransformSpeedreader();
+      }
+      DCHECK(!input_.Current().IsClosed());
+      input_.Current().Clear();
+      input_.Append(decoder_->Decode(transformed.c_str(), transformed.length()));
+    }
+  }
   MarkEndOfFile();
   PumpTokenizer();
 }
